@page "/localities"
@attribute [StreamRendering(true)]
@using System.Text.RegularExpressions
@rendermode InteractiveServer

<h1>Localities IBGE</h1>
<button class="btn btn-primary" @onclick="NewLocality">Create</button>
<br>
<br>

<div class="input-group mb-3">
    <InputSelect @bind-Value="searchType">
        @foreach (var searchType in Enum.GetValues<SearchType>())
        {
            <option value="@searchType">@searchType</option>
        }
    </InputSelect>
    <InputText class="form-control" @bind-Value="search"></InputText>

    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="Search">Pesquisar</button>
    </div>
</div>

<br>
<br>


@if (isLoading && searchPerformed)
{
    <p class="text-center">
        <em>Loading...</em>
    </p>
}
else if (!localities.Any())
{
    <p class="text-center">
        @if (searchPerformed)
        {
            <em>Resultado não encontrado, por favor, observe se a pesquisa está de acordo com o campo selecionado.</em>
        }
        else
        {
            <em>Carregando...</em>
        }
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>City</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var locality in localities)
            {
                <tr>
                    <td>@locality.Id</td>
                    <td>@locality.City</td>
                    <td>@locality.State</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteLocality(locality.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? ErrorMessage = null;
    private bool isLoading;
    private bool searchPerformed;
    private SearchType searchType = SearchType.Code;
    private IEnumerable<IBGE> localities { get; set; } = Enumerable.Empty<IBGE>();

    private string? search = null;
    private enum SearchType
    {
        Code,
        City,
        State
    };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        searchType = SearchType.Code;
        await LoadAllContentAsync();
    }

    private async Task LoadAllContentAsync()
    {
        localities = await _context.IBGE
            .AsNoTracking()
            .ToListAsync();

        StateHasChanged();
    }

    private void NewLocality() => _navigation.NavigateTo("/localities/create", false);

    private async Task Search()
    {
        ErrorMessage = null;

        if (string.IsNullOrWhiteSpace(search))
        {
            await LoadAllContentAsync();
            searchPerformed = false; // Define como false para permitir voltar à lista completa
            return;
        }

        isLoading = true;
        searchPerformed = true;

        try
        {
            switch (searchType)
            {
                case SearchType.Code:
                    localities = await _context.IBGE
                        .Where(x => EF.Functions.ILike(x.Id, $"%{search}%"))
                        .AsNoTracking()
                        .ToListAsync();
                    break;

                case SearchType.City:
                    localities = await _context.IBGE
                        .Where(x => EF.Functions.ILike(x.City, $"%{search}%"))
                        .AsNoTracking()
                        .ToListAsync();
                    break;

                case SearchType.State:
                    localities = await _context.IBGE
                        .Where(x => EF.Functions.ILike(x.State, $"%{search}%"))
                        .AsNoTracking()
                        .ToListAsync();
                    break;

                default:
                    ErrorMessage = "SearchType not implemented!";
                    break;
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            ErrorMessage = e.InnerException?.Message ?? e.Message;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task DeleteLocality(string id)
    {
        try
        {
            IBGE? locality = await _context.IBGE.FirstOrDefaultAsync(x => x.Id.ToLower().Equals(id.ToLower()));
            if (locality == null)
                throw new Exception("Not found");

            _context.IBGE.Remove(locality);
            await _context.SaveChangesAsync();
            await LoadAllContentAsync();
        }
        catch (Exception e)
        {
            ErrorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

}
