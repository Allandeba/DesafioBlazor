@page "/localities"
@attribute [StreamRendering(true)]
@using System.Text.RegularExpressions
@rendermode InteractiveServer

<h1>Localities IBGE</h1>
<button class="btn btn-primary" @onclick="NewLocality">Create</button>
<br>
<br>

<div class="input-group mb-3">
    <InputSelect @bind-Value="searchTypeString">
        <option value="Code">Código</option>
        <option value="City">Cidade</option>
        <option value="State">Estado</option>
    </InputSelect>
    <InputText class="form-control" @bind-Value="search"></InputText>

    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="Search">Pesquisar</button>
    </div>
</div>

<br>
<br>


@if (isLoading && searchPerformed)
{
    <p class="text-center">
        <em>Loading...</em>
    </p>
}
else if (!localities.Any())
{
    <p class="text-center">
        @if (searchPerformed)
        {
            <em>Resultado não encontrado, por favor, observe se a pesquisa está de acordo com o campo selecionado.</em>
        }
        else
        {
            <em>Carregando...</em>
        }
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>City</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var locality in GetFilteredLocalities())
            {
                <tr>
                    <td>@locality.Id</td>
                    <td>@locality.City</td>
                    <td>@locality.State</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteLocality(locality.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? ErrorMessage = null;
    private bool isLoading;
    private bool searchPerformed;
    private string searchTypeString = "Code";
    private IEnumerable<IBGE> localities { get; set; } = Enumerable.Empty<IBGE>();
    private IEnumerable<IBGE> GetFilteredLocalities()
    {
        return localities.Where(x =>
        string.IsNullOrEmpty(search) ||
        x.City.Equals(search, StringComparison.OrdinalIgnoreCase) ||
        x.State.Equals(search, StringComparison.OrdinalIgnoreCase) ||
        x.Id.Equals(search, StringComparison.OrdinalIgnoreCase)
        );
    }

    private string? search = null;
    private enum SearchType
    {
        Code,
        City,
        State
    };
    protected override async Task OnInitializedAsync()
    {
        searchTypeString = "Code"; // ou o valor padrão desejado
        await LoadCitiesAsync();
    }

    private async Task LoadCitiesAsync()
    {
        localities = await _context.IBGE.AsNoTracking()
        .Where(x => string.IsNullOrEmpty(search) || x.City.Contains(search, StringComparison.OrdinalIgnoreCase))
        .ToListAsync();

        StateHasChanged();
    }

    private void NewLocality() => _navigation.NavigateTo("/localities/create", false);

    private async Task Search()
    {
        ErrorMessage = null;

        if (string.IsNullOrWhiteSpace(search))
        {
            // Carrega a lista completa (ou qualquer outra lógica desejada para pesquisa em branco)
            await LoadCitiesAsync();
            searchPerformed = false; // Define como false para permitir voltar à lista completa
            return;
        }

        isLoading = true;
        searchPerformed = true;

        try
        {
            IEnumerable<IBGE> filteredLocalities;

            switch (searchTypeString)
            {
                case "Code":
                    // Verifica se o valor é composto apenas por números
                    if (int.TryParse(search, out _))
                    {
                        filteredLocalities = await _context.IBGE
                        .Where(x => EF.Functions.Like(x.Id, search))
                        .AsNoTracking()
                        .ToListAsync();
                    }
                    else
                    {
                        // Caso contrário, retorna uma lista vazia
                        filteredLocalities = Enumerable.Empty<IBGE>();
                    }
                    break;

                case "City":
                    // Verifica se o valor tem pelo menos 3 caracteres
                    if (search.Length >= 3)
                    {
                        filteredLocalities = await _context.IBGE
                        .Where(x => EF.Functions.Like(x.City, search))
                        .AsNoTracking()
                        .ToListAsync();
                    }
                    else
                    {
                        // Caso contrário, retorna uma lista vazia
                        filteredLocalities = Enumerable.Empty<IBGE>();
                    }
                    break;

                case "State":
                    // Verifica se o tipo de pesquisa é "State" e se o valor é uma sigla de estado
                    if (Regex.IsMatch(search, "^[A-Z]{2}$"))
                    {
                        filteredLocalities = await _context.IBGE
                        .Where(x => EF.Functions.Like(x.State, search))
                        .AsNoTracking()
                        .ToListAsync();
                    }
                    else
                    {
                        // Caso contrário, retorna uma lista vazia
                        filteredLocalities = Enumerable.Empty<IBGE>();
                    }
                    break;

                default:
                    filteredLocalities = Enumerable.Empty<IBGE>();
                    break;
            }

            localities = filteredLocalities;

            StateHasChanged();
        }
        catch (Exception e)
        {
            ErrorMessage = e.InnerException?.Message ?? e.Message;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task DeleteLocality(string id)
    {
        try
        {
            IBGE? locality = await _context.IBGE.FirstOrDefaultAsync(x => x.Id.ToLower().Equals(id.ToLower()));
            if (locality == null)
                throw new Exception("Not found");

            _context.IBGE.Remove(locality);
            await _context.SaveChangesAsync();
            await LoadCitiesAsync();
        }
        catch (Exception e)
        {
            ErrorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

}
