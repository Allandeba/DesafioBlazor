@page "/localities"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DesafioBlazor.Components.Pages.Localities.Components
@using DesafioBlazor.Data.SharedContext.Services
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="my-4">
    <h1 class="mb-4">Localidades IBGE</h1>
    <button class="btn btn-primary btn-lg mb-2" @onclick="NewLocality">Criar</button>
    <SearchBoxForm model="@searchBox" onSubmit="@Search" />
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (!localities.Any())
{
    <p class="text-center">
        @if (string.IsNullOrEmpty(errorMessage))
        {
            @if (searchPerformed)
            {
                <em>Nenhum registro encontrado...</em>
            }
            else
            {
                <em>Carregando...</em>
            }
        }
    </p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>City</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var locality in localities)
            {
                <tr>
                    <td>@locality.Id</td>
                    <td>@locality.City</td>
                    <td>@locality.State</td>
                    <td>
                        <button class="btn btn-secondary btn-sm" @onclick="() => EditLocality(locality.Id)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteLocality(locality.Id)">Deletar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? errorMessage = null;
    private bool searchPerformed = false;
    private IEnumerable<IBGE> localities { get; set; } = Enumerable.Empty<IBGE>();
    private SearchBox searchBox = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAllContentAsync();
    }

    private async Task LoadAllContentAsync()
    {
        localities = await _context.IBGE
        .AsNoTracking()
        .ToListAsync();
    }

    private void NewLocality() => _navigation.NavigateTo("/localities/create", false);

    private void EditLocality(string localityId)
    {
        string url = $"/localities/edit/{localityId}";
        _navigation.NavigateTo(url, false);
    }

    private async Task Search()
    {
        errorMessage = null;
        localities = Enumerable.Empty<IBGE>();

        if (string.IsNullOrWhiteSpace(searchBox.search))
        {
            await LoadAllContentAsync();
            return;
        }

        searchPerformed = false;
        try
        {
            switch (searchBox.searchType)
            {
                case Data.SharedContext.Enums.SearchType.Code:
                    if (!int.TryParse(searchBox.search, out _))
                    {
                        errorMessage = "Código deve ser numérico e ter no máximo 7 digitos";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.Id, $"%{searchBox.search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                case Enums.SearchType.City:
                    if (searchBox.search.Length < 3)
                    {
                        errorMessage = "Cidade deve conter ao menos 3 caracteres.";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.City, $"%{searchBox.search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                case Enums.SearchType.State:
                    // Verifica se o valor é uma sigla de estado
                    if (!Regex.IsMatch(searchBox.search, "^[A-Za-z]{2}$", RegexOptions.IgnoreCase))
                    {
                        errorMessage = "Estado deve conter apenas letras e ter exatamente 2 caracteres.";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.State, $"%{searchBox.search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                default:
                    errorMessage = "Tipo de busca não implementado!";
                    break;
            }
        }
        catch (Exception e)
        {
            errorMessage = e.InnerException?.Message ?? e.Message;
        }
        finally
        {
            searchPerformed = true;
        }
    }

    private async Task DeleteLocality(string id)
    {
        try
        {
            IBGE? locality = await _context.IBGE.FirstOrDefaultAsync(x => x.Id.ToLower().Equals(id.ToLower()));
            if (locality == null)
            {
                errorMessage = $"Não foi encontrado uma localidade com o id {id}!";
                return;
            }

            _context.IBGE.Remove(locality);
            await _context.SaveChangesAsync();
            await LoadAllContentAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

}
