@page "/localities"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@rendermode InteractiveServer

<h1>Localidades IBGE</h1>
<button class="btn btn-primary" @onclick="NewLocality">Criar</button>
<br>
<br>

<div class="input-group mb-3">
    <InputSelect @bind-Value="searchType">
        @foreach (var value in Enum.GetValues<SearchType>())
        {
            <option value="@value">@(EnumHelper.GetEnumDisplayName(value))</option>
        }
    </InputSelect>
    <InputText class="form-control" @bind-Value="search"></InputText>

    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="Search">Pesquisar</button>
    </div>
</div>

<br>
<br>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (!localities.Any())
{
    @if (string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-center">
            <em>Carregando...</em>
        </p>
    }
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>City</th>
                <th>State</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var locality in localities)
            {
                <tr>
                    <td>@locality.Id</td>
                    <td>@locality.City</td>
                    <td>@locality.State</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteLocality(locality.Id)">Deletar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? errorMessage = null;
    private bool searchPerformed = false;
    private SearchType searchType = SearchType.Code;
    private IEnumerable<IBGE> localities { get; set; } = Enumerable.Empty<IBGE>();

    private string? search = null;
    public enum SearchType
    {
        [Display(Name = "Código")]
        Code,
        [Display(Name = "Cidade")]
        City,
        [Display(Name = "Estado")]
        State
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        searchType = SearchType.Code;
        await LoadAllContentAsync();
    }

    private async Task LoadAllContentAsync()
    {
        localities = await _context.IBGE
        .AsNoTracking()
        .ToListAsync();

        StateHasChanged();
    }

    private void NewLocality() => _navigation.NavigateTo("/localities/create", false);

    private async Task Search()
    {
        errorMessage = null;
        localities = Enumerable.Empty<IBGE>();

        if (string.IsNullOrWhiteSpace(search))
        {
            await LoadAllContentAsync();
            return;
        }

        searchPerformed = false;
        try
        {
            switch (searchType)
            {
                case SearchType.Code:
                    // Verifica se o valor é composto apenas por números
                    if (!int.TryParse(search, out _))
                    {
                        errorMessage = "Código deve ser numérico e ter no máximo 7 digitos";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.Id, $"%{search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                case SearchType.City:
                    // Verifica se o valor tem pelo menos 3 caracteres
                    if (search.Length < 3)
                    {
                        errorMessage = "Cidade deve conter ao menos 3 caracteres.";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.City, $"%{search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                case SearchType.State:
                    // Verifica se o tipo de pesquisa é "State" e se o valor é uma sigla de estado
                    if (!Regex.IsMatch(search, "^[A-Za-z]{2}$", RegexOptions.IgnoreCase))
                    {
                        errorMessage = "Estado deve conter apenas letras e ter exatamente 2 caracteres.";
                        return;
                    }

                    localities = await _context.IBGE
                    .Where(x => EF.Functions.ILike(x.State, $"%{search}%"))
                    .AsNoTracking()
                    .ToListAsync();
                    break;

                default:
                    errorMessage = "SearchType not implemented!";
                    break;
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

    private async Task DeleteLocality(string id)
    {
        try
        {
            IBGE? locality = await _context.IBGE.FirstOrDefaultAsync(x => x.Id.ToLower().Equals(id.ToLower()));
            if (locality == null)
            {
                errorMessage = $"Não foi encontrado uma localidade com o id {id}!";
                return;
            }

            _context.IBGE.Remove(locality);
            await _context.SaveChangesAsync();
            await LoadAllContentAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

}
